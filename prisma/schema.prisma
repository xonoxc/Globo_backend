generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id           String           @id @default(uuid())
    name         String
    email        String           @unique
    password     String           @db.VarChar(60)
    avatar       String?
    isVerified   Boolean          @default(false)
    coverImage   String?
    refreshToken String?          @db.VarChar(1000)
    articles     Article[]
    preferences  UserPreferences?
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    comments     Comment[]
    likes        Like[]
    followedBy   Connection[]     @relation("FollowerRelation")
    following    Connection[]     @relation("FollowingRelation")
    bookmarks    Bookmark[]       @relation("OwnerRelation")
}

model UserPreferences {
    id           String  @id @default(uuid())
    proUser      Boolean @default(false)
    articleCount Int     @default(0)
    monthlyCount Int     @default(0)
    bio          String? @db.VarChar(1000)
    userId       String  @unique
    user         User    @relation(fields: [userId], references: [id])
}

model Article {
    id        String     @id @default(uuid())
    title     String     @db.VarChar(100)
    content   String     @db.MediumText
    status    String     @default("active")
    userId    String
    image     String?
    slug      String     @default("")
    user      User       @relation(fields: [userId], references: [id])
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    comments  Comment[]
    likes     Like[]
    Bookmark  Bookmark[] @relation("PostRelation")
}

model Comment {
    id        String    @id @default(uuid())
    articleId String
    content   String    @db.MediumText
    userId    String
    parentId  String?
    article   Article   @relation(fields: [articleId], references: [id])
    likes     Like[]    @relation("CommentLikes")
    user      User      @relation(fields: [userId], references: [id])
    parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
    replies   Comment[] @relation("CommentReplies")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@unique([articleId, userId, parentId])
}

model Like {
    id              String   @id @default(uuid())
    articleId       String?
    userId          String
    user            User     @relation(fields: [userId], references: [id])
    article         Article? @relation(fields: [articleId], references: [id])
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    parentCommentId String?
    comment         Comment? @relation("CommentLikes", fields: [parentCommentId], references: [id])

    @@unique([articleId, userId])
}

model Connection {
    id          String   @id @default(uuid())
    followerId  String
    followingId String
    follower    User     @relation("FollowerRelation", fields: [followerId], references: [id])
    following   User     @relation("FollowingRelation", fields: [followingId], references: [id])
    createdAt   DateTime @default(now())
}

model Bookmark {
    id        String @id @default(uuid())
    articleId String
    ownerId   String

    post  Article @relation("PostRelation", fields: [articleId], references: [id])
    owner User    @relation("OwnerRelation", fields: [ownerId], references: [id])
}
